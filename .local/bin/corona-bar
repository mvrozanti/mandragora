#!/usr/bin/env python
from bs4 import BeautifulSoup
from datetime import datetime as dt
from os import path as op
from time import sleep
import argparse
import code
import datetime
import json
import numpy as np
import os
import pandas as pd
import pyjq
import requests
import sqlite3
import sys
import time
from requests.packages.urllib3.exceptions import InsecureRequestWarning

requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

db = sqlite3.connect('/home/nexor/corona-db.sqlite', isolation_level=None)
scores_filepath = '/home/nexor/corona-scores.json'

def differences(a, b, section=None):
    return [(c, d, g, section) if all(not isinstance(i, dict) for i in [d, g]) and d != g \
            else None if all(not isinstance(i, dict) for i in [d, g]) and d == g \
            else differences(d, g, c) for [c, d], [h, g] in zip(a.items(), b.items())]
def get_current_stats(beep_difference=None):
    html = requests.get('https://www.worldometers.info/coronavirus/#countries', verify=False, timeout=10).text
    table = BeautifulSoup(html, 'lxml').select_one('table')
    data = [[td.text.strip() for td in row.find_all('td')] \
            for row in table.select('tr + tr')]
    headers = [th.text.strip().replace(' ', '_').replace('Â ', '_') \
            for th in table.select('tr th')]
    current_cases = {}
    for d in data:
        current_cases[d[0]] = {}
        for ix,v in enumerate(d[1:]):
            current_cases[d[0]][headers[ix+1]] = v
    if beep_difference:
        recent_cases = json.load(open(scores_filepath)) if \
                op.exists(scores_filepath) else {}
        diffs = list(filter(None, [i for b in differences(recent_cases, current_cases) for i in b]))
        for change in diffs:
            for cell in change:
                if cell and type(cell) != int and beep_difference in cell:
                    os.system('n=12000; while [ $n -gt 400 ]; do beep -f $n -l 2; n=$((n*97/100)); done')
                    # os.system('curl -s https://raw.githubusercontent.com/Josef-Friedrich/beep-melodies/master/startup.sh | sh')
                    break
            else:
                continue
            break
    json.dump(current_cases, open(scores_filepath, 'w'))
    return current_cases

def to_dataframe(cases):
    df = pd.read_json(json.dumps(cases)).T
    df['Country'] = df.index
    df['Timestamp'] = int(time.time())
    for k in ['TotalCases', 
              'NewCases', 
              'TotalDeaths', 
              'NewDeaths', 
              'TotalRecovered', 
              'ActiveCases', 
              'Serious,Critical', 
              'Tot_Cases/1M_pop',
              'Deaths/1M_pop',
              ]:
        df[k] = pd.to_numeric(df[k].str.replace(',', '').replace(r'^\s*$', np.nan, regex=True), \
                errors='coerce')
    df.reset_index(inplace=True)
    df.drop(['index','1stcase'], axis=1, inplace=True)
    return df

def main(args):
    if args.update:
        cases = get_current_stats(beep_difference=args.location)
        df = to_dataframe(cases)
        df.to_sql('cases', db, index=False, if_exists='append')
        db.execute('''DELETE FROM CASES
WHERE ROWID IN(
SELECT
c1.rowid
--c1.Country,c1.Timestamp
--c1.Country, c1.Timestamp, c2.Country, c2.Timestamp
--*
FROM CASES c1
JOIN CASES c2	ON  c1.Country   = c2.Country
				AND c1.Timestamp <> c2.Timestamp
WHERE (c1.TotalCases             = c2.TotalCases OR (c1.TotalCases IS NULL AND c2.TotalCases IS NULL))
AND   (c1.NewCases               = c2.NewCases OR (c1.NewCases IS NULL AND c2.NewCases IS NULL))
AND   (c1.TotalDeaths            = c2.TotalDeaths OR (c1.TotalDeaths IS NULL AND c2.TotalDeaths IS NULL))
AND   (c1.NewDeaths              = c2.NewDeaths OR (c1.NewDeaths IS NULL AND c2.NewDeaths IS NULL))
AND   (c1.TotalRecovered         = c2.TotalRecovered OR (c1.TotalRecovered IS NULL AND c2.TotalRecovered IS NULL))
AND   (c1.ActiveCases            = c2.ActiveCases OR (c1.ActiveCases IS NULL AND c2.ActiveCases IS NULL))
)''')
    if args.active_cases:
        print(int(df.loc[df['Country'] == args.location]['ActiveCases']))
    if args.infection_rate:
        today = dt.now()
        yesterday = today - datetime.timedelta(days=1)
        anteontem = today - datetime.timedelta(days=2)
        t_today = dt.timestamp(today)
        t_yesterday = dt.timestamp(yesterday)
        t_anteontem = dt.timestamp(anteontem)
        q = f"SELECT ActiveCases FROM CASES WHERE Timestamp>{t_anteontem} AND Timestamp<{t_yesterday} AND Country='Brazil' ORDER BY Timestamp ASC LIMIT 1"
        activeCasesYesterday = db.execute(q).fetchone()[0]
        activeCasesToday = db.execute(f"SELECT ActiveCases FROM CASES WHERE Country='Brazil' ORDER BY Timestamp DESC LIMIT 1").fetchone()[0]
        daily_rate = activeCasesToday/activeCasesYesterday*100-100
        print(f'{daily_rate:.2f}%')
    
if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='corona')
    parser.add_argument('-C', '--total-cases'              , action='store_true')
    parser.add_argument('-c', '--new-cases'                , action='store_true')
    parser.add_argument('-D', '--total-deaths'             , action='store_true')
    parser.add_argument('-d', '--new-deaths'               , action='store_true')
    parser.add_argument('-R', '--total-recovered'          , action='store_true')
    parser.add_argument('-a', '--active-cases'             , action='store_true')
    parser.add_argument('-s', '--serious-critical-cases'   , action='store_true')
    parser.add_argument('-p', '--total-cases-per-million'  , action='store_true')
    parser.add_argument('-P', '--total-deaths-per-million' , action='store_true')
    parser.add_argument('-u', '--update'                   , action='store_true')
    parser.add_argument('-b', '--beep-difference'          , action='store_true')
    parser.add_argument('-n', '--infection-rate'           , action='store_true')
    parser.add_argument('-l', '--location'                 , default='Brazil')
    args = parser.parse_args()
    main(args)
