set previewer ~/.config/lf/preview
# interpreter for shell commands (needs to be POSIX compatible)
set shell zsh

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 10

# use enter for shell commands
map <enter> shell

# execute current file (must be executable)
map x $$f
map X !$f

# dedicated keys for file opener actions
# map o &rifle $f
# map O $rifle --ask $f

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open ${{
    case $(file --mime-type $f -b) in
        text/*) $EDITOR $fx;;
        audio/*) mplayer $fx;;
        video/*) mpv $fx;;
        image/*) 
          bn=$(basename $f|sed 's;/;\\/;g')
          echo $a | grep 'png$\|jpe\?g$\|gif$' | sed '/'$bn'/,$!d' | sxiv -a -;;
        application/*) nvim $fx;;
        *) for f in $fx; do setsid $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}

map L jump-in
map H jump-out

${{
  JUMP_LIST=~/.config/lf/jump-list.$id
  JUMP_INDEX=~/.config/lf/jump-index.$id
  JUMPING=~/.config/lf/jumping.$id
  pwd >> $JUMP_LIST
  uniq $JUMP_LIST $JUMP_LIST.uniq
  mv $JUMP_LIST.uniq $JUMP_LIST
  cat $JUMP_LIST | wc -l | sed -e 's/ //g' > $JUMP_INDEX
  rm -f $JUMPING
}}

cmd jump-in ${{
  beep
  JUMP_LIST=~/.config/lf/jump-list.$id
  JUMP_INDEX=~/.config/lf/jump-index.$id
  INDEX=$(expr `cat $JUMP_INDEX` + 1)
  MAX=$(cat $JUMP_LIST | wc -l)
  if [ $INDEX -le $MAX ]; then
    echo $INDEX > $JUMP_INDEX
    touch ~/.config/lf/jumping.$id

    # https://stackoverflow.com/a/6022431/2103996
    TARGET=$(sed "${INDEX}q;d" $JUMP_LIST)
    lf -remote "send $id cd \"$TARGET\""
  fi
}}

cmd jump-out ${{
  JUMP_LIST=~/.config/lf/jump-list.$id
  JUMP_INDEX=~/.config/lf/jump-index.$id
  INDEX=$(expr `cat $JUMP_INDEX` - 1)
  if [ $INDEX -gt 0 ]; then
    echo $INDEX > $JUMP_INDEX
    touch ~/.config/lf/jumping.$id

    # https://stackoverflow.com/a/6022431/2103996
    TARGET=$(sed "${INDEX}q;d" $JUMP_LIST)
    lf -remote "send $id cd \"$TARGET\""
  fi
}}

cmd on-cd &{{
  JUMP_LIST=~/.config/lf/jump-list.$id
  JUMP_INDEX=~/.config/lf/jump-index.$id
  JUMPING=~/.config/lf/jumping.$id
  if [ -e $JUMPING ]; then
    # If jumping, just move.
    rm $JUMPING
  else
    # Otherwise, truncate jump list at current index and record new directory.
    head -n $(cat $JUMP_INDEX) $JUMP_LIST > $JUMP_LIST.new
    pwd >> $JUMP_LIST.new
    mv $JUMP_LIST.new $JUMP_LIST
    INDEX=$(expr `cat $JUMP_LIST | wc -l`)
    echo $INDEX > $JUMP_INDEX
  fi
}}

# make sure trash folder exists
# %mkdir -p ~/.trash

# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)
cmd trash %set -f; mv $fx ~/.trash

map D delete
map <delete> delete

map y
map d
map dd cut
map yy copy 
cmd copy-image &{{
  [[ `echo "$f" | rev | cut -d'.' -f1 | rev` =~ "jpe?g" ]] && convert $f png:- | xclip -selection clipboard -t image/png || xclip -selection clipboard -t image/png %f
}}
map yb copy-image 
map yp $echo $f|xargs realpath|xsel -i -b
map yn $echo $f|xargs basename|xsel -i -b
cmd edit-tags ${{
  [[ -d .tmsu ]] || tmsu init ; tmsu tags $f | cut -d':' -f2- | vipe | xargs -I{} sh -c 'tmsu untag -a $f ; tmsu tag $f {}'
}}
map t edit-tags
map bw $~/.local/bin/setbg $f

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

#############################################################
set previewer ~/.config/lf/preview
cmd bulk-rename ${{
    vidir
}}
map R bulk-rename
map ; :set hidden!
map A rename # at the very end
map D delete
map U $unp -u $f 

map g/ cd /
map gh cd ~
cmd mountPics %{{ 
    if [[ -z "$(ls ~/disk/pics)" ]]; then
        read -s pass;
        echo $pass | gocryptfs /mnt/4ADE1465DE144C17/peeks /mnt/4ADE1465DE144C17/pics;
    fi
    ~/go/bin/lf -remote "send $id cd ~/disk/pics"
}}
map ge mountPics
map gE cd /etc
map gv cd /var
map g? cd /usr/share/doc/ranger
map gR cd ~/.config/ranger
map gd cd ~/disk
map gt cd ~/mackenzie/TCC/
map gT cd ~/.local/share/Trash
map gG cd ~/gdrive
map gu cd ~/util
map gb cd ~/prog/bash
map gL cd ~/gdrive/library/
map gA cd ~/gdrive/library/abstracts
map gB cd ~/gdrive/library/books
map gC cd ~/prog/C++
map gJ cd ~/prog/javascript
map gj cd ~/prog/java
map gp cd ~/prog/python
map gP cd ~/prog
map gc cd ~/.config
map gM cd ~/disk/Musik
map gf cd ~/disk/Filmes
map gw cd ~/gdrive/Levv/wllpps
map g4 cd ~/gdrive/Levv/4chan
map gV cd ~/.config/nvim
map gs cd ~/sys4bank/prog
map gD cd ~/Downloads
map gm cd ~/mackenzie
map gr cd ~/mackenzie/TCC/res/arts/

set reverse on
set sortby time
