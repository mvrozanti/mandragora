# set previewer ~/.config/lf/preview
set previewer ~/.config/lf/scope.sh
# interpreter for shell commands (needs to be POSIX compatible)
set shell zsh

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 10

# use enter for shell commands
map <enter> shell

# execute current file (must be executable)
map x $$f
map X !$f

# dedicated keys for file opener actions
map o &mimeopen $f
map O $mimeopen --ask $f

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open ${{
    case $(file --mime-type $f -b) in
        text/*) $EDITOR $fx;;
        *) for f in $fx; do setsid $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}

# define a custom 'rename' command without prompt for overwrite
# cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
# map r push :rename<space>

# make sure trash folder exists
# %mkdir -p ~/.trash

# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)
cmd trash %set -f; mv $fx ~/.trash

# define a custom 'delete' command
# cmd delete ${{
#     set -f
#     printf "$fx\n"
#     printf "delete?[y/n]"
#     read ans
#     [ $ans = "y" ] && rm -rf $fx
# }}

# use '<delete>' key for either 'trash' or 'delete' command
# map <delete> trash
# map <delete> delete

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

#############################################################
set previewer ~/.config/lf/preview
cmd bulk-rename ${{
    vidir
}}
map R bulk-rename
map ; :set hidden!
map A rename # at the very end

map g/ cd /
map gh cd ~
# map ge chain shell ~/.local/bin/mP ; cd ~/disk/pics
map gE cd /etc
map gv cd /var
map g? cd /usr/share/doc/ranger
map gR cd ~/.config/ranger
# map gl cd -r .
# map gL cd -r %f
map gd cd ~/disk
map gt cd ~/mackenzie/TCC/
map gT cd ~/.local/share/Trash
map gG cd ~/gdrive
map gu cd ~/util
map gb cd ~/prog/bash
map gL cd ~/gdrive/library/
map gA cd ~/gdrive/library/abstracts
map gB cd ~/gdrive/library/books
map gC cd ~/prog/C++
map gJ cd ~/prog/javascript
map gj cd ~/prog/java
map gp cd ~/prog/python
map gP cd ~/prog
map gc cd ~/.config
map gM cd ~/disk/Musik
map gf cd ~/disk/Filmes
map gw cd ~/gdrive/Levv/wllpps
map g4 cd ~/gdrive/Levv/4chan
map gV cd ~/.config/nvim
map gs cd ~/sys4bank/prog
map gD cd ~/Downloads
map gm cd ~/mackenzie
map gr cd ~/mackenzie/TCC/res/arts/
